% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/powerSimMultiple.R
\name{powerSimMultiple}
\alias{powerSimMultiple}
\title{Estimate omnibus power for multiple effects by simulation}
\usage{
powerSimMultiple(fit, test = fixed, xvars = getAllXnames(fit, exclude =
  c("(Intercept)"), pred.type = "anova"), sim = fit, fitOpts = list(),
  testOpts = list(), simOpts = list(), seed, ...)
}
\arguments{
\item{fit}{a fitted model object (see \code{\link{doFit}}).}

\item{test}{specify the test to perform. By default, the package-default
fixed-effect test will be performed (see \code{\link{tests}})}

\item{xvars}{The model parameters to test. By defaultt \code{fit} will be}

\item{sim}{an object to simulate from. By default this is the same as
\code{fit} (see \code{\link{doSim}}).}

\item{fitOpts}{extra arguments for \code{\link{doFit}}.}

\item{testOpts}{extra arguments for \code{\link{doTest}}.}

\item{simOpts}{extra arguments for \code{\link{doSim}}.}

\item{seed}{specify a random number generator seed, for reproducible results.}

\item{...}{any additional arguments are passed on to \code{\link{simrOptions}}.
Common options include:
\describe{
    \item{\code{nsim}:}{the number of simulations to run (default is \code{1000}).}
    \item{\code{alpha}:}{the significance level for the statistical test (default is \code{0.05}).}
    \item{\code{progress}:}{use progress bars during calculations (default is \code{TRUE}).}
}}
}
\value{
an object of class `powerSimList`, which is similar to the `powerSim`
  object but has lists for some of its fields
}
\description{
Perform a power analysis for a mixed model, testing multiple predictors
simultaneously. This follows the usual procedure for statistical testing,
where all variables in a model are tested simultaneously in a single model
fitted to a given dataset.
}
\details{
This function differs from \code{\link{powerSim}} primarily in the
  specification of the test. Instead of requiring a test for a single term,
  the test must be specified as a function that returns the test for a term
  specified as a character. For \code{\link[=tests]{fixed}}, you can simply
  pass the 'bare' function name, as \code{fixed} itself returns the
  appropriate test when passed a model term as a character. To specify
  additional options to \code{fixed}, you need to wrap the call
  (see examples). It should be possible to construct an appropriate wrapper
  to \code{\link[=tests]{compare}}, but this will be somewhat more complicated
  and the specification of arbitrary nested models isn't necessary for the
  omnibus tests this function is designed to implement.
}
\examples{
fm1 <- lmer(angle ~ recipe + temp + (1|recipe:replicate), cake, REML= FALSE)
fm2 <- lm(mpg ~ disp + wt,data=mtcars)

# default tests on all model terms
powerSimMultiple(fm1, nsim=10)
\dontrun{
# KR-test on all model terms
powerSimMultiple(fm1, function(x) fixed(x,method="kr"), nsim=10)
}
# t-tests on all model coefficients: with separate tests for each categorical contrast
powerSimMultiple(fm2, function(x) fixed(x,method="t"), getAllXnames(fm2, pred.type="coef"), nsim=10)

}
\seealso{
\code{\link{powerSim}}, \code{\link{print.powerSimList}},
  \code{\link{confint.powerSimList}}, \code{\link{summary.powerSimList}}
}

